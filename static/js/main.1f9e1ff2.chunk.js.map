{"version":3,"sources":["assets/header/logo.png","apiConfig.tsx","auth/components/SignUp.tsx","auth/api.tsx","auth/components/SignIn.tsx","containers/components/LanguageSelector.tsx","shared/Header.tsx","shared/AuthenticatedRoute.tsx","shared/autoDismissAlert.tsx","neworder/apiNewOrder.tsx","neworder/components/NewOrder.tsx","containers/components/MainPage.tsx","i18n.js","containers/components/Map.tsx","containers/ContactUs.tsx","App.tsx","serviceWorker.ts","redux/system/types.tsx","redux/system/reducers.tsx","index.tsx"],"names":["module","exports","apiUrl","apiUrls","window","location","hostname","SignUp","props","useState","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","className","onSubmit","event","preventDefault","credentials","fetch","method","headers","Accept","body","JSON","stringify","password_confirmation","signUp","then","console","log","res","setAlerts","alerts","title","variant","catch","error","htmlFor","required","name","value","type","placeholder","onChange","e","target","Button","SignIn","history","useHistory","useDispatch","axios","url","data","signIn","setUser","user","toast","success","push","LanguageSelector","useTranslation","i18n","t","changeLanguage","defaultChecked","Header","authenticatedOptions","Fragment","to","unauthenticatedOptions","alwaysOptions","src","logo","alt","AuthenticatedRoute","Component","component","render","rest","AutoDismissAlert","timer","handleClose","setState","show","state","this","setInterval","clearInterval","alert","Alert","dismissible","onClose","Heading","React","searchPhone","phone","a","async","token","Authorization","response","status","json","responseJson","getSuggestions","address","postAddress","customer","phoneNumber","currentAddress","NewOrder","setPhoneNumber","setAddress","setName","orderTotal","setOrderTotal","date","setDate","suggestions","setSuggestions","useEffect","length","info","fetchMyApi","responseArr","fetchForSuggestedAddresses","map","suggestion","key","onClick","saveTheAddress","description","MainPage","use","Backend","initReactI18next","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","Map","lat","width","height","style","border","aria-hidden","ContactUs","App","fallback","index","exact","path","Boolean","match","UPDATE_SESSION","initialState","loggedIn","session","userName","store","createStore","action","payload","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f9e1ff2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.38fd4d84.png\";","export let apiUrl: string\r\n\r\nconst apiUrls = {\r\n  development: 'http://localhost:4741',\r\n  production: 'https://dotdot-api.herokuapp.com'\r\n}\r\n\r\nif (window.location.hostname === 'localhost') {\r\n  apiUrl = apiUrls.development\r\n} else {\r\n  apiUrl = apiUrls.production\r\n}\r\n\r\nexport default apiUrl\r\n","import React, { useState } from 'react'\r\n// import { withRouter } from 'react-router-dom'\r\n\r\nimport { signUp } from '../api'\r\nimport { Credentials } from '../../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\ntype Props = {\r\n  setAlerts: any\r\n  alerts: Array<any>\r\n  setUser: any\r\n  history?: any\r\n}\r\n\r\nconst SignUp: React.FC<Props> = props => {\r\n  const [email, setEmail] = useState()\r\n  const [password, setPassword] = useState()\r\n  const [passwordConfirmation, setPasswordConfirmation] = useState()\r\n  // const [history, setHistory] = useState()\r\n  // handleChange = event =>\r\n  //   this.setState({\r\n  //     [event.target.name]: event.target.value\r\n  //   })\r\n\r\n  const onSignUp = (event: { preventDefault: () => void }) => {\r\n    event.preventDefault()\r\n    //console.log('history', history)\r\n    const credentials: Credentials = { email, password, passwordConfirmation }\r\n    signUp(credentials)\r\n      .then(() => console.log(email))\r\n      .then((res: any) => console.log(email, res))\r\n      .then(() =>\r\n        props.setAlerts([\r\n          ...props.alerts,\r\n          { title: 'Sign up Successful', variant: 'success' }\r\n        ])\r\n      )\r\n      .then(() => console.log('pro'))\r\n      .catch((error: any) => {\r\n        console.error('ERR', error)\r\n        //let variant = undefined\r\n\r\n        props.setAlerts([\r\n          ...props.alerts,\r\n          { title: 'Hello', variant: 'success' }\r\n        ])\r\n      })\r\n  }\r\n\r\n  // render() {\r\n  //   const { email, password, passwordConfirmation } = this.state\r\n\r\n  return (\r\n    <div className=\"col-md-6 m-auto py-3\">\r\n      <form className=\"auth-form\" onSubmit={onSignUp}>\r\n        <h3>Sign Up</h3>\r\n\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input\r\n          required\r\n          name=\"email\"\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={e => setEmail(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          required\r\n          name=\"password\"\r\n          value={password}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          onChange={e => setPassword(e.target.value)}\r\n        />\r\n        <label htmlFor=\"passwordConfirmation\">Confirm Password</label>\r\n        <input\r\n          required\r\n          name=\"passwordConfirmation\"\r\n          value={passwordConfirmation}\r\n          type=\"password\"\r\n          placeholder=\"Confirm Password\"\r\n          onChange={e => setPasswordConfirmation(e.target.value)}\r\n        />\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default SignUp\r\n","import { apiUrl } from '../apiConfig'\r\nimport axios from 'axios'\r\nimport { Credentials } from '../shared/types'\r\n\r\nexport const signUp = (credentials: Credentials) =>\r\n  fetch(`${apiUrl}/sign-up/`, {\r\n    method: 'Post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Accept-Language': 'ru,en;q=0.9'\r\n    },\r\n    body: JSON.stringify({\r\n      credentials: {\r\n        email: `${credentials.email}`,\r\n        password: `${credentials.password}`,\r\n        password_confirmation: `${credentials.passwordConfirmation}`\r\n      }\r\n    })\r\n  })\r\n\r\nexport const signIn = (credentials: Credentials) =>\r\n  axios({\r\n    url: apiUrl + '/sign-in',\r\n    method: 'POST',\r\n    data: {\r\n      credentials: {\r\n        email: credentials.email,\r\n        password: credentials.password\r\n      }\r\n    }\r\n  })\r\n// fetch(`${apiUrl}/sign-in/`, {\r\n//   method: 'Post',\r\n//   headers: {\r\n//     Accept: 'application/json',\r\n//     'Content-Type': 'application/json',\r\n//     'Accept-Language': 'ru,en;q=0.9'\r\n//   },\r\n//   body: JSON.stringify({\r\n//     credentials: {\r\n//       email: `${credentials.email}`,\r\n//       password: `${credentials.password}`\r\n//     }\r\n//   })\r\n// })\r\n//   return axios({\r\n//     method: 'POST',\r\n//     url: apiUrl + '/sign-up',\r\n//     headers: {\r\n//       Accept: 'application/json',\r\n//       'Content-Type': 'application/json',\r\n//       'Accept-Language': 'ru,en;q=0.9'\r\n//     },\r\n//     data: {\r\n//       credentials: {\r\n//         email: credentials.email,\r\n//         password: credentials.password,\r\n//         password_confirmation: credentials.passwordConfirmation\r\n//       }\r\n//     }\r\n//   })\r\n// }\r\n\r\n// export const signIn = credentials => {\r\n//   console.log('logininin', apiUrl + '/sign-in')\r\n//   return axios({\r\n//     url: apiUrl + '/sign-in',\r\n//     method: 'POST',\r\n//     data: {\r\n//       credentials: {\r\n//         email: credentials.email,\r\n//         password: credentials.password\r\n//       }\r\n//     }\r\n//   })\r\n// }\r\n\r\n// export const signOut = user => {\r\n//   return axios({\r\n//     url: apiUrl + '/sign-out',\r\n//     method: 'DELETE',\r\n//     headers: {\r\n//       Authorization: `Token token=${user.token}`\r\n//     }\r\n//   })\r\n// }\r\n\r\n// export const changePassword = (passwords, user) => {\r\n//   return axios({\r\n//     url: apiUrl + '/change-password',\r\n//     method: 'PATCH',\r\n//     headers: {\r\n//       Authorization: `Token token=${user.token}`\r\n//     },\r\n//     data: {\r\n//       passwords: {\r\n//         old: passwords.oldPassword,\r\n//         new: passwords.newPassword\r\n//       }\r\n//     }\r\n//   })\r\n// }\r\n","import React, { useState } from 'react'\r\n// import { History } from 'history'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { signIn } from '../api'\r\nimport { Credentials } from '../../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { updateSession } from '../../redux/system/actions'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\n\r\ntype Props = {\r\n  setAlerts: any\r\n  alerts: Array<any>\r\n  setUser: any\r\n}\r\n\r\nconst SignIn: React.FC<Props> = props => {\r\n  const [email, setEmail] = useState('st@st.com')\r\n  const [password, setPassword] = useState('stst')\r\n  //const [passwordConfirmation, setPasswordConfirmation] = useState()\r\n  let history = useHistory()\r\n  const dispatch = useDispatch()\r\n\r\n  const onSignIn = (event: { preventDefault: () => void }) => {\r\n    event.preventDefault()\r\n    const credentials: Credentials = { email, password }\r\n    signIn(credentials)\r\n      .then((res: any) => {\r\n        props.setUser(res.data.user)\r\n        // dispatch(updateSession(res.data.user.token))\r\n      })\r\n      .then(() => toast.success('Welcome!'))\r\n      .then(() => {\r\n        history.push('/new-order')\r\n      })\r\n      .catch((error: any) => {\r\n        console.error(error)\r\n        toast.error('Something went wrong, please check the console.')\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-md-6 m-auto py-3\">\r\n      <form className=\"auth-form\" onSubmit={onSignIn}>\r\n        <h3>Oturum Aç</h3>\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input\r\n          required\r\n          name=\"email\"\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={e => setEmail(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          required\r\n          name=\"password\"\r\n          value={password}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          onChange={e => setPassword(e.target.value)}\r\n        />\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Oturum Aç\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default SignIn\r\n","import React from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst LanguageSelector = () => {\r\n  const { t, i18n } = useTranslation()\r\n\r\n  const changeLanguage = (event: any) => {\r\n    i18n.changeLanguage(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div onChange={changeLanguage}>\r\n      <input type=\"radio\" value=\"en\" name=\"language\" /> Eng\r\n      <input type=\"radio\" value=\"tr\" name=\"language\" defaultChecked /> Tr\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageSelector","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Header.scss'\r\nimport { User } from './types'\r\nimport logo from '../assets/header/logo.png'\r\nimport LanguageSelector from '../containers/components/LanguageSelector'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\nconst Header: React.FC<Props> = props => {\r\n\r\n  const { t, i18n } = useTranslation()\r\n  const authenticatedOptions = (\r\n  <React.Fragment>\r\n    <Link to=\"/new-order\">Yeni Sipariş</Link>\r\n    <Link to=\"/change-password\">Parolayı Değiştir</Link>\r\n    <Link to=\"/sign-out\">Çıkış yap</Link>\r\n  </React.Fragment>\r\n)\r\n\r\nconst unauthenticatedOptions = (\r\n  <React.Fragment>\r\n    <Link to=\"/sign-in\">{t(\"customer.login.label\")}</Link>\r\n  </React.Fragment>\r\n)\r\n\r\n\r\nconst alwaysOptions = (\r\n  <React.Fragment>\r\n    <Link to=\"/\">{t(\"main-page.label\")}</Link>\r\n    <Link to=\"/technical-resources\">{t(\"technical-resources.label\")}</Link>\r\n    <Link to=\"/services\">{t(\"services.label\")}</Link>\r\n    <Link to=\"/references\">{t(\"references.label\")}</Link>\r\n    <Link to=\"/contact-us\">{t(\"contact-us.label\")}</Link>\r\n    <LanguageSelector />\r\n  </React.Fragment>\r\n)\r\n\r\n\r\n  const { user } = props\r\n  //console.log(user)\r\n  return (\r\n    <header className=\"main-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1 className={\"hidden-md-down\"}>Aydın Elektro Mekanik Bobinaj</h1>\r\n      <nav>\r\n        {user && <span>Hoşgeldiniz, {user.email}</span>}\r\n        {user ? authenticatedOptions : unauthenticatedOptions}\r\n        {alwaysOptions}\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\n// props will include a `user` object or empty object\r\n// props will include a `component` as `Component` or a `render`\r\n// all other props that may be passed in are `..rest`\r\ntype Props = {\r\n  user: any\r\n  component?: any\r\n  exact?: boolean\r\n  render: any\r\n  path: string\r\n}\r\nconst AuthenticatedRoute: React.FC<Props> = ({\r\n  user,\r\n  component: Component,\r\n  render,\r\n  ...rest\r\n}) => {\r\n  // if props include a `user` object and a `render` then create route with `render`\r\n  if (user && render) {\r\n    return <Route {...rest} render={render} />\r\n    // if props include a `user` object but no `render` then create route with `Component`\r\n    // if props do not include a `user` object then redirect to home\r\n  } else {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={props =>\r\n          user ? <Component {...props} /> : <Redirect to=\"/\" />\r\n        }\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default AuthenticatedRoute\r\n","import React from 'react'\r\nimport Alert, { AlertProps } from 'react-bootstrap/Alert'\r\n\r\ntype Props = {\r\n  dismissible: boolean\r\n  alert: AlertProps\r\n  onClose: () => void\r\n}\r\n\r\ninterface ComponentState {\r\n  show: boolean\r\n}\r\n\r\nclass AutoDismissAlert extends React.Component<Props, ComponentState> {\r\n  timer!: NodeJS.Timeout\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      show: true\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState({ show: false })\r\n    }, 4000)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  handleClose = () => this.setState({ show: false })\r\n\r\n  render() {\r\n    const { alert } = this.props\r\n    return (\r\n      <Alert\r\n        dismissible\r\n        show={this.state.show}\r\n        variant={alert.variant}\r\n        onClose={this.handleClose}\r\n      >\r\n        <div className=\"container\">\r\n          <Alert.Heading>{alert.title}</Alert.Heading>\r\n        </div>\r\n      </Alert>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoDismissAlert\r\n","import { apiUrl } from '../apiConfig'\r\nimport axios from 'axios'\r\nimport { Credentials, User } from '../shared/types'\r\n\r\nexport const createOrder = (credentials: Credentials) =>\r\n  fetch(`${apiUrl}/new-order/`, {\r\n    method: 'Post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Accept-Language': 'ru,en;q=0.9'\r\n    },\r\n    body: JSON.stringify({\r\n      credentials: {\r\n        email: `${credentials.email}`,\r\n        password: `${credentials.password}`,\r\n        password_confirmation: `${credentials.passwordConfirmation}`\r\n      }\r\n    })\r\n  })\r\n\r\nexport const searchPhone = async (phone: string, user: User) => {\r\n  // const token = SecureStore.getItemAsync('secure_token')\r\n  // console.log('searchByPhone network', user.token)\r\n\r\n  // const token = await SecureStore.getItemAsync('secure_token')\r\n  // console.log('apiurl', apiUrl)\r\n  const token = user.token\r\n  const response = await fetch(`${apiUrl}/customers/${phone}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: 'Bearer ' + token\r\n    }\r\n  })\r\n  if (response.status === 200) {\r\n    const responseJson = await response.json()\r\n    return responseJson\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport const getSuggestions = async (address: string, user: User) => {\r\n  const token = user.token\r\n  const response = await fetch(`${apiUrl}/google-maps-masker/${address}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: 'Bearer ' + token\r\n    }\r\n  })\r\n  if (response.status === 200) {\r\n    const responseJson = await response.json()\r\n    console.log('responseJson', responseJson)\r\n    return responseJson\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\ntype Data = {\r\n  phoneNumber: string\r\n  address: string\r\n  name: string\r\n}\r\nexport const saveTheAddress = async (\r\n  phoneNumber: string,\r\n  address: string,\r\n  name: string,\r\n  user: User\r\n) => {\r\n  const data = {\r\n    phoneNumber,\r\n    address,\r\n    name\r\n  }\r\n  // openMap({ end: this.state.currentAddress, navigate_mode: \"navigate\" });\r\n  postAddress(data, user)\r\n}\r\n\r\nexport const postAddress = async (data: Data, user: User) => {\r\n  const token = user.token\r\n\r\n  const response = await fetch(`${apiUrl}/customers/`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Bearer ' + token\r\n    },\r\n    body: JSON.stringify({\r\n      customer: {\r\n        name: data.name,\r\n        phone: data.phoneNumber,\r\n        currentAddress: data.address\r\n      }\r\n    })\r\n  })\r\n\r\n  const responseJson = await response.json()\r\n  console.log(\r\n    'reponse postAddress',\r\n    responseJson,\r\n    'responseCode',\r\n    response.status\r\n  )\r\n  return response.status === 1 ? true : false\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n// import { History } from 'history'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n//import { signIn } from '../api'\r\nimport { Credentials, User } from '../../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { searchPhone, getSuggestions, saveTheAddress } from '../apiNewOrder'\r\nimport { AlertProps } from 'react-bootstrap/Alert'\r\n// import { default as NumberFormat } from 'react-number-format'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\n\r\ntype Props = {\r\n  user: User\r\n  alerts: Array<any>\r\n  setAlerts: any\r\n}\r\ntype Suggestion = {\r\n  description: string\r\n  id: string\r\n}\r\n\r\nconst NewOrder: React.FC<Props> = props => {\r\n  const [phoneNumber, setPhoneNumber] = useState('')\r\n  const [address, setAddress] = useState()\r\n\r\n  const [name, setName] = useState()\r\n  const [orderTotal, setOrderTotal] = useState()\r\n  const [date, setDate] = useState()\r\n  const [suggestions, setSuggestions] = useState()\r\n\r\n  const cleanFields = () => {\r\n    setPhoneNumber('')\r\n    setAddress('')\r\n    setName('')\r\n    setOrderTotal('')\r\n    setDate('')\r\n    setSuggestions('')\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchMyApi() {\r\n      if (phoneNumber && phoneNumber.length === 10) {\r\n        const response = await searchPhone(phoneNumber, props.user)\r\n        if (response) {\r\n          toast.success('Address found!')\r\n          setAddress(response.customer.currentAddress)\r\n        } else {\r\n          toast.info('Address not found, please create one.')\r\n        }\r\n      }\r\n    }\r\n    fetchMyApi()\r\n  }, [phoneNumber])\r\n\r\n  useEffect(() => {\r\n    async function fetchForSuggestedAddresses() {\r\n      if (address && address.length > 4) {\r\n        const response = await getSuggestions(address, props.user)\r\n        if (response === false) {\r\n          toast.error('failed! please change the format.')\r\n        }\r\n        console.log('retrieved addresses', response.response)\r\n        const responseArr = response.response\r\n        setSuggestions([...responseArr])\r\n      }\r\n    }\r\n    fetchForSuggestedAddresses()\r\n  }, [address])\r\n\r\n  //localStorage.getItem('token', data)\r\n  return (\r\n    <div className=\"col-md-6 m-auto py-3\">\r\n      <form className=\"auth-form\" onSubmit={() => console.log('heyo')}>\r\n        <h3>Add new order</h3>\r\n        <label htmlFor=\"number\">Phone Number</label>\r\n        {/*<input\r\n          required\r\n          type=\"text\"\r\n          pattern=\"[0-9]\"\r\n          name=\"phoneNumber\"\r\n          value={phoneNumber}\r\n          placeholder=\"6172 827141\"\r\n          maxLength={10}\r\n          onChange={e => {\r\n            const re = /^[0-9\\b]+$/\r\n\r\n            if (e.target.value === '' || re.test(e.target.value)) {\r\n              setPhoneNumber(e.target.value)\r\n            }\r\n          }}\r\n        />*/}\r\n\r\n        <label htmlFor=\"text\">Address</label>\r\n\r\n        <input\r\n          required\r\n          name=\"Address\"\r\n          value={address}\r\n          type=\"text\"\r\n          placeholder=\"566 Columbia Rd\"\r\n          onChange={e => setAddress(e.target.value)}\r\n        />\r\n        <label htmlFor=\"text\">Name</label>\r\n\r\n        <input\r\n          name=\"name\"\r\n          value={name}\r\n          type=\"text\"\r\n          placeholder=\"Big Papa\"\r\n          onChange={e => setName(e.target.value)}\r\n        />\r\n        <label htmlFor=\"number\">Order Total</label>\r\n\r\n        <input\r\n          name=\"orderTotal\"\r\n          value={orderTotal}\r\n          type=\"number\"\r\n          placeholder=\"Optional\"\r\n          onChange={e => setOrderTotal(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">Date</label>\r\n\r\n        <input\r\n          name=\"date\"\r\n          value={date}\r\n          type=\"date\"\r\n          placeholder=\"Optional\"\r\n          onChange={e => setDate(e.target.value)}\r\n        />\r\n\r\n        {suggestions &&\r\n          suggestions.length > 0 &&\r\n          suggestions.map((suggestion: Suggestion, key: number) => (\r\n            <Button\r\n              variant=\"primary\"\r\n              key={key}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                saveTheAddress(\r\n                  phoneNumber,\r\n                  suggestion.description,\r\n                  name,\r\n                  props.user\r\n                )\r\n                cleanFields()\r\n              }}\r\n            >\r\n              {suggestion.description}\r\n            </Button>\r\n          ))}\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default NewOrder\r\n","import React, { useState, useEffect } from 'react'\r\n// import { History } from 'history'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n//import { signIn } from '../api'\r\nimport { Credentials, User } from '../../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { AlertProps } from 'react-bootstrap/Alert'\r\n// import { default as NumberFormat } from 'react-number-format'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\ntype Props = {\r\n}\r\ntype Suggestion = {\r\n\r\n}\r\n\r\nconst MainPage: React.FC<Props> = props => {\r\n\r\n  const cleanFields = () => {\r\n  }\r\n  const { t, i18n } = useTranslation()\r\n\r\n  useEffect(() => {}, [])\r\n\r\n  return (\r\n    <div className=\"col m-auto py-3\">\r\n        <div className=\"row\">\r\n            <div className=\"col-6 mx-auto\">\r\n                <h1>\r\n                    {t(\"about-us.title\")}\r\n                </h1>\r\n            </div>\r\n            <div className=\"col-6 mx-auto\">\r\n                <p>\r\n                    {t(\"about-us.label\")}\r\n                </p>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\nexport default MainPage\r\n","import i18n from 'i18next'\r\n// import * as i18n from 'i18next'\r\n\r\nimport Backend from 'i18next-xhr-backend'\r\nimport { initReactI18next } from 'react-i18next'\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(initReactI18next)\r\n  .init({\r\n    lng: 'tr',\r\n    backend: {\r\n      /* translation file path */\r\n      loadPath: '/assets/i18n/{{ns}}/{{lng}}.json'\r\n    },\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\r\n    ns: ['translations'],\r\n    defaultNS: 'translations',\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n      formatSeparator: ','\r\n    },\r\n    react: {\r\n      wait: true\r\n    }\r\n  })\r\n\r\nexport default i18n","\r\nimport React, { useState } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst Map = (props: any) => {\r\n    const [center, setCenter] = useState({lat: 39.98902860303093, lng: 32.750475149376975 });\r\nconst myStyle = {\r\n    border:0\r\n    } as React.CSSProperties;\r\n\r\n\r\n    return (\r\n        <iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d191.05427872197143!2d32.7501537032726!3d39.98904483595042!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14d34988f451b257%3A0x7d53b4cc18739607!2zMznCsDU5JzIwLjUiTiAzMsKwNDUnMDEuOCJF!5e0!3m2!1sen!2sus!4v1608968149484!5m2!1sen!2sus&z=15\" width=\"800\" height=\"350\" style={myStyle} aria-hidden=\"false\"></iframe>\r\n    )\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from 'react'\r\n// import { History } from 'history'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n//import { signIn } from '../api'\r\nimport { Credentials, User } from '../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { AlertProps } from 'react-bootstrap/Alert'\r\n// import { default as NumberFormat } from 'react-number-format'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport { useTranslation } from 'react-i18next'\r\nimport GoogleMapReact from 'google-map-react'\r\nimport Map from './components/Map'\r\ntype Props = {\r\n}\r\ntype Suggestion = {\r\n\r\n}\r\n\r\nconst ContactUs: React.FC<Props> = props => {\r\n\r\n  const cleanFields = () => {\r\n  }\r\n  const { t, i18n } = useTranslation()\r\n\r\n  useEffect(() => {}, [])\r\n\r\n  return (\r\n    <div className=\"col m-auto py-3\">\r\n        <div className=\"row\">\r\n            <div className=\"col-3 mx-auto\">\r\n                <p>\r\n                    {t(\"contact.address.label\")}{\":\"} {t(\"contact.address\")}\r\n                </p>\r\n                <p>\r\n                    {t(\"contact.telephone.label\")}{\":\"} {t(\"contact.telephone\")}\r\n                </p>\r\n                <p>\r\n                    {t(\"contact.fax.label\")}{\":\"} {t(\"contact.fax\")}\r\n                </p>\r\n                <p>\r\n                    {t(\"contact.email.label\")}{\":\"} {t(\"contact.email\")}\r\n                </p>\r\n            </div>\r\n            <div className=\"col-9 mx-auto\">\r\n                <Map></Map>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ContactUs\r\n","import React, { useState, Suspense  } from 'react'\r\n// import logo from './logo.svg'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport SignUp from './auth/components/SignUp'\r\nimport { createBrowserHistory } from 'history'\r\nimport SignIn from './auth/components/SignIn'\r\nimport Header from './shared/Header'\r\nimport AuthenticatedRoute from './shared/AuthenticatedRoute'\r\nimport AutoDismissAlert from './shared/autoDismissAlert'\r\nimport { AlertProps } from 'react-bootstrap/Alert'\r\nimport NewOrder from './neworder/components/NewOrder'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport MainPage from './containers/components/MainPage'\r\nimport './i18n'\r\nimport ContactUs from './containers/ContactUs'\r\nconst App: React.FC = () => {\r\n  const [user, setUser] = useState()\r\n  const [alerts, setAlerts] = useState([])\r\n\r\n  return (\r\n    <Suspense fallback={null}>\r\n    <div className=\"App\">\r\n      <main className=\"container-fluid\">\r\n        <ToastContainer />\r\n        <Router>\r\n          <Header user={user}></Header>\r\n          {alerts.length > 0 &&\r\n            alerts.map((alert: AlertProps, index) => (\r\n              <AutoDismissAlert\r\n                key={index}\r\n                dismissible\r\n                onClose={() => setAlerts([])}\r\n                alert={alert}\r\n              >\r\n                <p>{alert.title}</p>\r\n              </AutoDismissAlert>\r\n            ))}\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/\"\r\n              render={() => (\r\n                  <MainPage />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/technical-resources\"\r\n              render={() => (\r\n                <div>\r\n                  <h1>Teknik Bilgiler</h1>\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/services\"\r\n              render={() => (\r\n                <div>\r\n                  <h1>Services Under Construction</h1>\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/references\"\r\n              render={() => (\r\n                <div>\r\n                  <h1>İş Ortaklarımız</h1>\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/contact-us\"\r\n              render={() => (\r\n                <ContactUs />\r\n              )}\r\n            />\r\n            <AuthenticatedRoute\r\n              user={user}\r\n              exact\r\n              path=\"/new-order\"\r\n              render={() => (\r\n                <NewOrder\r\n                  alerts={alerts}\r\n                  setAlerts={setAlerts}\r\n                  user={user}\r\n                ></NewOrder>\r\n              )}\r\n            />\r\n            <AuthenticatedRoute\r\n              user={user}\r\n              exact\r\n              path=\"/change-password\"\r\n              render={() => (\r\n                <div>\r\n                  <h1>Under Construction</h1>\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/sign-up\"\r\n              render={() => (\r\n                <SignUp\r\n                  alerts={alerts}\r\n                  setAlerts={setAlerts}\r\n                  setUser={setUser}\r\n                />\r\n              )}\r\n            />\r\n            {!user ? (\r\n              <Route\r\n                path=\"/sign-in\"\r\n                render={() => (\r\n                  <SignIn\r\n                    alerts={alerts}\r\n                    setAlerts={setAlerts}\r\n                    setUser={setUser}\r\n                  />\r\n                )}\r\n              />\r\n            ) : null}\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    </div>\r\n    </Suspense>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// Describing the shape of the system's slice of state\r\nexport interface SystemState {\r\n  loggedIn: boolean\r\n  session: string\r\n  userName: string\r\n}\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const UPDATE_SESSION = 'UPDATE_SESSION'\r\n\r\ninterface UpdateSessionAction {\r\n  type: typeof UPDATE_SESSION\r\n  payload: SystemState\r\n}\r\n\r\nexport type SystemActionTypes = UpdateSessionAction\r\n","import { UPDATE_SESSION, SystemState, SystemActionTypes } from './types'\r\n\r\nconst initialState: SystemState = {\r\n  loggedIn: false,\r\n  session: '',\r\n  userName: ''\r\n}\r\n\r\nexport function systemReducer(\r\n  state = initialState,\r\n  action: SystemActionTypes\r\n): SystemState {\r\n  switch (action.type) {\r\n    case UPDATE_SESSION: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport { systemReducer } from './redux/system/reducers'\r\nimport { createStore } from 'redux'\r\n// import './i18n';\r\n\r\nconst store = createStore(systemReducer)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}