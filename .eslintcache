[{"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\index.tsx":"1","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\serviceWorker.ts":"2","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\App.tsx":"3","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\reducers.tsx":"4","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\AuthenticatedRoute.tsx":"5","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\Header.tsx":"6","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\autoDismissAlert.tsx":"7","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\types.tsx":"8","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignUp.tsx":"9","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\components\\NewOrder.tsx":"10","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignIn.tsx":"11","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\api.tsx":"12","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\apiNewOrder.tsx":"13","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\apiConfig.tsx":"14"},{"size":689,"mtime":1608862305446,"results":"15","hashOfConfig":"16"},{"size":5358,"mtime":1608862305450,"results":"17","hashOfConfig":"16"},{"size":2996,"mtime":1608955843457,"results":"18","hashOfConfig":"16"},{"size":448,"mtime":1608862305449,"results":"19","hashOfConfig":"16"},{"size":1015,"mtime":1608862305451,"results":"20","hashOfConfig":"16"},{"size":1120,"mtime":1608955843459,"results":"21","hashOfConfig":"16"},{"size":1055,"mtime":1608862305452,"results":"22","hashOfConfig":"16"},{"size":401,"mtime":1608862305450,"results":"23","hashOfConfig":"16"},{"size":2675,"mtime":1608862305445,"results":"24","hashOfConfig":"16"},{"size":4458,"mtime":1608957236780,"results":"25","hashOfConfig":"16"},{"size":2158,"mtime":1608955843458,"results":"26","hashOfConfig":"16"},{"size":2613,"mtime":1608862305443,"results":"27","hashOfConfig":"16"},{"size":2715,"mtime":1608862305446,"results":"28","hashOfConfig":"16"},{"size":294,"mtime":1608862305443,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"o47kqg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\index.tsx",[],["61","62"],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\serviceWorker.ts",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\App.tsx",["63","64","65"],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\reducers.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\AuthenticatedRoute.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\Header.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\autoDismissAlert.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\types.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignUp.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\components\\NewOrder.tsx",["66","67","68","69","70","71"],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignIn.tsx",["72","73"],"import React, { useState } from 'react'\r\n// import { History } from 'history'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { signIn } from '../api'\r\nimport { Credentials } from '../../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { updateSession } from '../../redux/system/actions'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\n\r\ntype Props = {\r\n  setAlerts: any\r\n  alerts: Array<any>\r\n  setUser: any\r\n}\r\n\r\nconst SignIn: React.FC<Props> = props => {\r\n  const [email, setEmail] = useState('st@st.com')\r\n  const [password, setPassword] = useState('stst')\r\n  //const [passwordConfirmation, setPasswordConfirmation] = useState()\r\n  let history = useHistory()\r\n  const dispatch = useDispatch()\r\n\r\n  const onSignIn = (event: { preventDefault: () => void }) => {\r\n    event.preventDefault()\r\n    const credentials: Credentials = { email, password }\r\n    signIn(credentials)\r\n      .then((res: any) => {\r\n        props.setUser(res.data.user)\r\n        // dispatch(updateSession(res.data.user.token))\r\n      })\r\n      .then(() => toast.success('Welcome!'))\r\n      .then(() => {\r\n        history.push('/new-order')\r\n      })\r\n      .catch((error: any) => {\r\n        console.error(error)\r\n        toast.error('Something went wrong, please check the console.')\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-md-6 m-auto py-3\">\r\n      <form className=\"auth-form\" onSubmit={onSignIn}>\r\n        <h3>Sign In</h3>\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input\r\n          required\r\n          name=\"email\"\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={e => setEmail(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">Password</label>\r\n        <input\r\n          required\r\n          name=\"password\"\r\n          value={password}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          onChange={e => setPassword(e.target.value)}\r\n        />\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Sign In\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default SignIn\r\n","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\api.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\apiNewOrder.tsx",["74"],"import { apiUrl } from '../apiConfig'\r\nimport axios from 'axios'\r\nimport { Credentials, User } from '../shared/types'\r\n\r\nexport const createOrder = (credentials: Credentials) =>\r\n  fetch(`${apiUrl}/new-order/`, {\r\n    method: 'Post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Accept-Language': 'ru,en;q=0.9'\r\n    },\r\n    body: JSON.stringify({\r\n      credentials: {\r\n        email: `${credentials.email}`,\r\n        password: `${credentials.password}`,\r\n        password_confirmation: `${credentials.passwordConfirmation}`\r\n      }\r\n    })\r\n  })\r\n\r\nexport const searchPhone = async (phone: string, user: User) => {\r\n  // const token = SecureStore.getItemAsync('secure_token')\r\n  // console.log('searchByPhone network', user.token)\r\n\r\n  // const token = await SecureStore.getItemAsync('secure_token')\r\n  // console.log('apiurl', apiUrl)\r\n  const token = user.token\r\n  const response = await fetch(`${apiUrl}/customers/${phone}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: 'Bearer ' + token\r\n    }\r\n  })\r\n  if (response.status === 200) {\r\n    const responseJson = await response.json()\r\n    return responseJson\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport const getSuggestions = async (address: string, user: User) => {\r\n  const token = user.token\r\n  const response = await fetch(`${apiUrl}/google-maps-masker/${address}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: 'Bearer ' + token\r\n    }\r\n  })\r\n  if (response.status === 200) {\r\n    const responseJson = await response.json()\r\n    console.log('responseJson', responseJson)\r\n    return responseJson\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\ntype Data = {\r\n  phoneNumber: string\r\n  address: string\r\n  name: string\r\n}\r\nexport const saveTheAddress = async (\r\n  phoneNumber: string,\r\n  address: string,\r\n  name: string,\r\n  user: User\r\n) => {\r\n  const data = {\r\n    phoneNumber,\r\n    address,\r\n    name\r\n  }\r\n  // openMap({ end: this.state.currentAddress, navigate_mode: \"navigate\" });\r\n  postAddress(data, user)\r\n}\r\n\r\nexport const postAddress = async (data: Data, user: User) => {\r\n  const token = user.token\r\n\r\n  const response = await fetch(`${apiUrl}/customers/`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Bearer ' + token\r\n    },\r\n    body: JSON.stringify({\r\n      customer: {\r\n        name: data.name,\r\n        phone: data.phoneNumber,\r\n        currentAddress: data.address\r\n      }\r\n    })\r\n  })\r\n\r\n  const responseJson = await response.json()\r\n  console.log(\r\n    'reponse postAddress',\r\n    responseJson,\r\n    'responseCode',\r\n    response.status\r\n  )\r\n  return response.status === 1 ? true : false\r\n}\r\n","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\apiConfig.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":5,"column":50,"nodeType":"81","messageId":"82","endLine":5,"endColumn":54},{"ruleId":"79","severity":1,"message":"83","line":7,"column":10,"nodeType":"81","messageId":"82","endLine":7,"endColumn":30},{"ruleId":"79","severity":1,"message":"84","line":14,"column":26,"nodeType":"81","messageId":"82","endLine":14,"endColumn":31},{"ruleId":"79","severity":1,"message":"85","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":20},{"ruleId":"79","severity":1,"message":"86","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":21},{"ruleId":"79","severity":1,"message":"87","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":20},{"ruleId":"79","severity":1,"message":"88","line":11,"column":10,"nodeType":"81","messageId":"82","endLine":11,"endColumn":24},{"ruleId":"89","severity":1,"message":"90","line":54,"column":6,"nodeType":"91","endLine":54,"endColumn":19,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"90","line":69,"column":6,"nodeType":"91","endLine":69,"endColumn":15,"suggestions":"93"},{"ruleId":"79","severity":1,"message":"94","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":23},{"ruleId":"79","severity":1,"message":"95","line":22,"column":9,"nodeType":"81","messageId":"82","endLine":22,"endColumn":17},{"ruleId":"79","severity":1,"message":"96","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":13},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'createBrowserHistory' is defined but never used.","'toast' is defined but never used.","'useHistory' is defined but never used.","'Credentials' is defined but never used.","'AlertProps' is defined but never used.","'ToastContainer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.user'. Either include it or remove the dependency array.","ArrayExpression",["99"],["100"],"'updateSession' is defined but never used.","'dispatch' is assigned a value but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [phoneNumber, props.user]",{"range":"105","text":"106"},"Update the dependencies array to be: [address, props.user]",{"range":"107","text":"108"},[1589,1602],"[phoneNumber, props.user]",[2104,2113],"[address, props.user]"]