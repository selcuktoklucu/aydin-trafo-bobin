[{"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\index.tsx":"1","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\serviceWorker.ts":"2","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\App.tsx":"3","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\reducers.tsx":"4","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\AuthenticatedRoute.tsx":"5","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\Header.tsx":"6","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\autoDismissAlert.tsx":"7","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\types.tsx":"8","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignUp.tsx":"9","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\components\\NewOrder.tsx":"10","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignIn.tsx":"11","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\api.tsx":"12","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\apiNewOrder.tsx":"13","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\apiConfig.tsx":"14"},{"size":689,"mtime":1608862305446,"results":"15","hashOfConfig":"16"},{"size":5358,"mtime":1608862305450,"results":"17","hashOfConfig":"16"},{"size":2878,"mtime":1608862305442,"results":"18","hashOfConfig":"16"},{"size":448,"mtime":1608862305449,"results":"19","hashOfConfig":"16"},{"size":1015,"mtime":1608862305451,"results":"20","hashOfConfig":"16"},{"size":1358,"mtime":1608955408124,"results":"21","hashOfConfig":"16"},{"size":1055,"mtime":1608862305452,"results":"22","hashOfConfig":"16"},{"size":401,"mtime":1608862305450,"results":"23","hashOfConfig":"16"},{"size":2675,"mtime":1608862305445,"results":"24","hashOfConfig":"16"},{"size":4600,"mtime":1608862305447,"results":"25","hashOfConfig":"16"},{"size":2255,"mtime":1608954762768,"results":"26","hashOfConfig":"16"},{"size":2613,"mtime":1608862305443,"results":"27","hashOfConfig":"16"},{"size":2715,"mtime":1608862305446,"results":"28","hashOfConfig":"16"},{"size":294,"mtime":1608862305443,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"o47kqg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\index.tsx",[],["62","63"],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\serviceWorker.ts",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\App.tsx",["64","65"],"import React from 'react'\r\n// import logo from './logo.svg'\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport SignUp from './auth/components/SignUp'\r\nimport { createBrowserHistory } from 'history'\r\nimport SignIn from './auth/components/SignIn'\r\nimport Header from './shared/Header'\r\nimport AuthenticatedRoute from './shared/AuthenticatedRoute'\r\nimport AutoDismissAlert from './shared/autoDismissAlert'\r\nimport { AlertProps } from 'react-bootstrap/Alert'\r\nimport NewOrder from './neworder/components/NewOrder'\r\nconst { useState } = React\r\n\r\nconst App: React.FC = () => {\r\n  const [user, setUser] = useState()\r\n  const [alerts, setAlerts] = useState([])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main className=\"container\">\r\n        <Router>\r\n          <Header user={user}></Header>\r\n          {alerts.length > 0 &&\r\n            alerts.map((alert: AlertProps, index) => (\r\n              <AutoDismissAlert\r\n                key={index}\r\n                dismissible\r\n                onClose={() => setAlerts([])}\r\n                alert={alert}\r\n              >\r\n                <p>{alert.title}</p>\r\n              </AutoDismissAlert>\r\n            ))}\r\n          <Switch>\r\n            <AuthenticatedRoute\r\n              user={user}\r\n              exact\r\n              path=\"/\"\r\n              render={() => (\r\n                <div>\r\n                  <h1>Under Construction</h1>\r\n                </div>\r\n              )}\r\n            />\r\n            <AuthenticatedRoute\r\n              user={user}\r\n              exact\r\n              path=\"/new-order\"\r\n              render={() => (\r\n                <NewOrder\r\n                  alerts={alerts}\r\n                  setAlerts={setAlerts}\r\n                  user={user}\r\n                ></NewOrder>\r\n              )}\r\n            />\r\n            <AuthenticatedRoute\r\n              user={user}\r\n              exact\r\n              path=\"/change-password\"\r\n              render={() => (\r\n                <div>\r\n                  <h1>Under Construction</h1>\r\n                </div>\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/sign-up\"\r\n              render={() => (\r\n                <SignUp\r\n                  alerts={alerts}\r\n                  setAlerts={setAlerts}\r\n                  setUser={setUser}\r\n                />\r\n              )}\r\n            />\r\n            {!user ? (\r\n              <Route\r\n                path=\"/sign-in\"\r\n                render={() => (\r\n                  <SignIn\r\n                    alerts={alerts}\r\n                    setAlerts={setAlerts}\r\n                    setUser={setUser}\r\n                  />\r\n                )}\r\n              />\r\n            ) : null}\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\reducers.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\AuthenticatedRoute.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\Header.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\shared\\autoDismissAlert.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\redux\\system\\types.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignUp.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\components\\NewOrder.tsx",["66","67","68","69","70"],"import React, { useState, useEffect } from 'react'\r\n// import { History } from 'history'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n//import { signIn } from '../api'\r\nimport { Credentials, User } from '../../shared/types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { searchPhone, getSuggestions, saveTheAddress } from '../apiNewOrder'\r\nimport { AlertProps } from 'react-bootstrap/Alert'\r\n\r\ntype Props = {\r\n  user: User\r\n  alerts: Array<any>\r\n  setAlerts: any\r\n}\r\ntype Suggestion = {\r\n  description: string\r\n  id: string\r\n}\r\n\r\nconst NewOrder: React.FC<Props> = props => {\r\n  const [phoneNumber, setPhoneNumber] = useState('')\r\n  const [address, setAddress] = useState()\r\n\r\n  const [name, setName] = useState()\r\n  const [orderTotal, setOrderTotal] = useState()\r\n  const [date, setDate] = useState()\r\n  const [suggestions, setSuggestions] = useState()\r\n\r\n  const cleanFields = () => {\r\n    setPhoneNumber('')\r\n    setAddress('')\r\n    setName('')\r\n    setOrderTotal('')\r\n    setDate('')\r\n    setSuggestions('')\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchMyApi() {\r\n      if (phoneNumber && phoneNumber.length === 10) {\r\n        const response = await searchPhone(phoneNumber, props.user)\r\n        if (response) {\r\n          setAddress(response.customer.currentAddress)\r\n        } else {\r\n          props.setAlerts([\r\n            ...props.alerts,\r\n            {\r\n              title: 'Address not found! Please create one',\r\n              variant: 'success'\r\n            }\r\n          ])\r\n        }\r\n      }\r\n    }\r\n    fetchMyApi()\r\n  }, [phoneNumber])\r\n\r\n  useEffect(() => {\r\n    async function fetchForSuggestedAddresses() {\r\n      if (address && address.length > 4) {\r\n        const response = await getSuggestions(address, props.user)\r\n        if (response === false) {\r\n          props.setAlerts([\r\n            ...props.alerts,\r\n            {\r\n              title:\r\n                'getSuggestions failed. Please change the input and try again',\r\n              variant: 'danger'\r\n            }\r\n          ])\r\n        }\r\n        console.log('retrieved addresses', response.response)\r\n        const responseArr = response.response\r\n        setSuggestions([...responseArr])\r\n      }\r\n    }\r\n    fetchForSuggestedAddresses()\r\n  }, [address])\r\n\r\n  //localStorage.getItem('token', data)\r\n  return (\r\n    <div className=\"col-md-6 m-auto py-3\">\r\n      <form className=\"auth-form\" onSubmit={() => console.log('heyo')}>\r\n        <h3>Add new order</h3>\r\n        <label htmlFor=\"number\">Phone Number</label>\r\n        <input\r\n          required\r\n          type=\"text\"\r\n          pattern=\"[0-9]\"\r\n          name=\"phoneNumber\"\r\n          value={phoneNumber}\r\n          placeholder=\"6172 827141\"\r\n          maxLength={10}\r\n          onChange={e => {\r\n            const re = /^[0-9\\b]+$/\r\n\r\n            if (e.target.value === '' || re.test(e.target.value)) {\r\n              setPhoneNumber(e.target.value)\r\n            }\r\n          }}\r\n        />\r\n        <label htmlFor=\"text\">Address</label>\r\n\r\n        <input\r\n          required\r\n          name=\"Address\"\r\n          value={address}\r\n          type=\"text\"\r\n          placeholder=\"566 Columbia Rd\"\r\n          onChange={e => setAddress(e.target.value)}\r\n        />\r\n        <label htmlFor=\"text\">Name</label>\r\n\r\n        <input\r\n          name=\"name\"\r\n          value={name}\r\n          type=\"text\"\r\n          placeholder=\"Big Papa\"\r\n          onChange={e => setName(e.target.value)}\r\n        />\r\n        <label htmlFor=\"number\">Order Total</label>\r\n\r\n        <input\r\n          name=\"orderTotal\"\r\n          value={orderTotal}\r\n          type=\"number\"\r\n          placeholder=\"Optional\"\r\n          onChange={e => setOrderTotal(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">Date</label>\r\n\r\n        <input\r\n          name=\"date\"\r\n          value={date}\r\n          type=\"date\"\r\n          placeholder=\"Optional\"\r\n          onChange={e => setDate(e.target.value)}\r\n        />\r\n\r\n        {suggestions &&\r\n          suggestions.length > 0 &&\r\n          suggestions.map((suggestion: Suggestion, key: number) => (\r\n            <Button\r\n              variant=\"primary\"\r\n              key={key}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                saveTheAddress(\r\n                  phoneNumber,\r\n                  suggestion.description,\r\n                  name,\r\n                  props.user\r\n                )\r\n                cleanFields()\r\n              }}\r\n            >\r\n              {suggestion.description}\r\n            </Button>\r\n          ))}\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\nexport default NewOrder\r\n","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\components\\SignIn.tsx",["71","72"],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\auth\\api.tsx",[],"C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\neworder\\apiNewOrder.tsx",["73"],"import { apiUrl } from '../apiConfig'\r\nimport axios from 'axios'\r\nimport { Credentials, User } from '../shared/types'\r\n\r\nexport const createOrder = (credentials: Credentials) =>\r\n  fetch(`${apiUrl}/new-order/`, {\r\n    method: 'Post',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'Accept-Language': 'ru,en;q=0.9'\r\n    },\r\n    body: JSON.stringify({\r\n      credentials: {\r\n        email: `${credentials.email}`,\r\n        password: `${credentials.password}`,\r\n        password_confirmation: `${credentials.passwordConfirmation}`\r\n      }\r\n    })\r\n  })\r\n\r\nexport const searchPhone = async (phone: string, user: User) => {\r\n  // const token = SecureStore.getItemAsync('secure_token')\r\n  // console.log('searchByPhone network', user.token)\r\n\r\n  // const token = await SecureStore.getItemAsync('secure_token')\r\n  // console.log('apiurl', apiUrl)\r\n  const token = user.token\r\n  const response = await fetch(`${apiUrl}/customers/${phone}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: 'Bearer ' + token\r\n    }\r\n  })\r\n  if (response.status === 200) {\r\n    const responseJson = await response.json()\r\n    return responseJson\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport const getSuggestions = async (address: string, user: User) => {\r\n  const token = user.token\r\n  const response = await fetch(`${apiUrl}/google-maps-masker/${address}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      Authorization: 'Bearer ' + token\r\n    }\r\n  })\r\n  if (response.status === 200) {\r\n    const responseJson = await response.json()\r\n    console.log('responseJson', responseJson)\r\n    return responseJson\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\ntype Data = {\r\n  phoneNumber: string\r\n  address: string\r\n  name: string\r\n}\r\nexport const saveTheAddress = async (\r\n  phoneNumber: string,\r\n  address: string,\r\n  name: string,\r\n  user: User\r\n) => {\r\n  const data = {\r\n    phoneNumber,\r\n    address,\r\n    name\r\n  }\r\n  // openMap({ end: this.state.currentAddress, navigate_mode: \"navigate\" });\r\n  postAddress(data, user)\r\n}\r\n\r\nexport const postAddress = async (data: Data, user: User) => {\r\n  const token = user.token\r\n\r\n  const response = await fetch(`${apiUrl}/customers/`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Bearer ' + token\r\n    },\r\n    body: JSON.stringify({\r\n      customer: {\r\n        name: data.name,\r\n        phone: data.phoneNumber,\r\n        currentAddress: data.address\r\n      }\r\n    })\r\n  })\r\n\r\n  const responseJson = await response.json()\r\n  console.log(\r\n    'reponse postAddress',\r\n    responseJson,\r\n    'responseCode',\r\n    response.status\r\n  )\r\n  return response.status === 1 ? true : false\r\n}\r\n","C:\\Users\\selcu\\git\\dotdbWebTypeScript\\src\\apiConfig.tsx",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":5,"column":50,"nodeType":"80","messageId":"81","endLine":5,"endColumn":54},{"ruleId":"78","severity":1,"message":"82","line":7,"column":10,"nodeType":"80","messageId":"81","endLine":7,"endColumn":30},{"ruleId":"78","severity":1,"message":"83","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":20},{"ruleId":"78","severity":1,"message":"84","line":6,"column":10,"nodeType":"80","messageId":"81","endLine":6,"endColumn":21},{"ruleId":"78","severity":1,"message":"85","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":57,"column":6,"nodeType":"88","endLine":57,"endColumn":19,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"87","line":79,"column":6,"nodeType":"88","endLine":79,"endColumn":15,"suggestions":"90"},{"ruleId":"78","severity":1,"message":"91","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":23},{"ruleId":"78","severity":1,"message":"92","line":22,"column":9,"nodeType":"80","messageId":"81","endLine":22,"endColumn":17},{"ruleId":"78","severity":1,"message":"93","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'createBrowserHistory' is defined but never used.","'useHistory' is defined but never used.","'Credentials' is defined but never used.","'AlertProps' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["96"],["97"],"'updateSession' is defined but never used.","'dispatch' is assigned a value but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [phoneNumber, props]",{"range":"102","text":"103"},"Update the dependencies array to be: [address, props]",{"range":"104","text":"105"},[1560,1573],"[phoneNumber, props]",[2254,2263],"[address, props]"]
